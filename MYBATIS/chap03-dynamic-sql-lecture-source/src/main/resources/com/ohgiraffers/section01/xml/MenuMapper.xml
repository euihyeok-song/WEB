<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.section01.xml.MenuMapper">

    <resultMap id="menuResultMap" type="MenuDTO">
        <id property="menuCode" column="MENU_CODE"/>
        <result property="menuName" column="MENU_NAME"/>
        <result property="menuPrice" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
    </resultMap>

    <select id="selectMenuByPrice" parameterType="_int" resultMap="menuResultMap">
        <!--
            설명.
             OGNL(Object Graph Navigation Language)
             : single quatation('') 구간의 값은 리터럴 값(category)으로 보고
               그게 아닌 이름(condition)은 객체의 필드 또는 변수로
               인식하게 작성하는 기법이다.

            설명.
             1. gte(>=): greater than equal
             2. gt(>): greater then
             3. lte(<=): less than equal
             4. lt(<): less than
             5. eq(==): equal
             6. neq(!=): not equal
        -->
        SELECT
               A.MENU_CODE
             , A.MENU_NAME
             , A.MENU_PRICE
             , A.CATEGORY_CODE
             , A.ORDERABLE_STATUS
          FROM TBL_MENU A
         WHERE A.ORDERABLE_STATUS = 'Y'
        <if test="price gte 0 and price lte 10000">
            <!-- <![CDATA[[]]> : "<"가 태그가 아닌 char(크기비교)에 해당하는 걸 인지시켜줌 => [[]]안에 들어가는 것은 전부 char이다.-->
            <![CDATA[
            AND A.MENU_PRICE < #{ price }
            ]]>
        </if>
        <if test="price gt 10000 price lte 20000">    <!-- gt(>) -->
            AND A.MENU_PRICE BETWEEN 10000 AND 20000
        </if>
        <if test="price gt 20000 price lte 30000">
            AND A.MENU_PRICE BETWEEN 20000 AND 30000
        </if>
        <if test="price gt 30000">
           AND A.MENU_PRICE >= 30000
        </if>
    </select>

    <!-- paramerType은 경로로 적어야하지만, alias를 사용해서 아래처럼 사용함 -->
    <select id="searchMenu" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT
               A.MENU_CODE
             , A.MENU_NAME
             , A.MENU_PRICE
             , A.CATEGORY_CODE
             , A.ORDERABLE_STATUS
          FROM TBL_MENU A
        <if test="condition == 'category'">
            JOIN TBL_CATEGIRY B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
        </if>
         WHERE A.ORDERABLE_STATUS = 'Y'
        <if test="condition == 'category'">
            AND B.CATEGORY_NAME = #{ value }    <!-- 사용자가 카테고리의 검색어를 입력할 경우 숫자가 아닌 이름으로 입력할 것으로 예상 -->
        </if>
        <if test="condition == 'name'">
            AND A.MENU_NAME LIKE CONCAT('%', #{ value }. '%')   <!-- '%' || #{ value } || '%' 도 가능 -->
        </if>
         ORDER BY 1 DESC
    </select>
    
    <select id="searchMenuBySupCategory" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT
               A.MENU_CODE
             , A.MENU_NAME
             , A.MENU_PRICE
             , A.CATEGORY_CODE
             , A.ORDERABLE_STATUS
          FROM TBL_MENU A
         WHERE A.ORDERABLE_STATUS = 'Y'
        <!-- <choose>는 swithch문과 동일한 개념 (아래의 IN은 DB를 참고) => 단점: DB 수정(ex.카테고리 추가)시 쿼리도 수정해야함 -->
        <choose>
            <when test="value == '식사'">
               AND A.CATEGORY_CODE IN (4,5,6,7)
            </when>
            <when test="value == '음료'">
                AND A.CATEGORY_CODE IN (8,9,10)
            </when>
            <when test="value == '디저트'">
                AND A.CATEGORY_CODE IN (11,12)
            </when>
        </choose>
    </select>
    <!-- 반환형인 parameterType이 직접 정의한 것이 아닌 List이므로 마이바티스 사이트를 참고해서 적어야함 -->
    <select id="searchMenuByRandomMenuCode" parameterType="list" resultMap="menuResultMap">
        SELECT
               A.MENU_CODE
             , A.MENU_NAME
             , A.MENU_PRICE
             , A.CATEGORY_CODE
             , A.ORDERABLE_STATUS
          FROM TBL_MENU A
         WHERE A.MENU_CODE IN
        <!-- 반복 기능 -->
        <foreach collection="list" item="menuCode" open="(" close=")" separator=", ">
            #{ menuCode }
        </foreach>
    </select>

    <select id="searchMenuByCodeOrSearchAll" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT
               A.MENU_CODE
             , A.MENU_NAME
             , A.MENU_PRICE
             , A.CATEGORY_CODE
             , A.ORDERABLE_STATUS
          FROM TBL_MENU A
        <if test="condition != null and condition eq 'menuCode'">
         WHERE A.MENU_CODE = #{ value }
        </if>
    </select>

    <select id="searchMenuByNameOrCategory" parameterType="hashmap" resultMap="menuResultMap">
        SELECT
               A.MENU_CODE
             , A.MENU_NAME
             , A.MENU_PRICE
             , A.CATEGORY_CODE
             , A.ORDERABLE_STATUS
          FROM TBL_MENU A
        <!-- 설명. where 태그가 있으면 앞에 Where라는 구문 있으면 자동으로 Where을 붙여주는 개념이며,
              Or 이나 And가 있는 것만 실행될 경우에 Where로 덮어 씌운다. (대체로 이 방식 사용)
        -->
<!--        <where>-->
<!--            <if test="nameValue != null">-->
<!--               A.MENU_NAME Like CONCAT('%' , #{ nameValue } , '%')-->
<!--            </if>-->
<!--            <if test="categoryValue != null">-->
<!--           AND A.CATEGORY_CODE = #{ categoryValue }-->
<!--            </if>-->
<!--        </where>-->
        <!-- 설명. trim을 사용한 구문 -->
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="nameValue != null">
                A.MENU_NAME Like CONCAT('%' , #{ nameValue } , '%')
            </if>
            <if test="categoryValue != null">
                AND A.CATEGORY_CODE = #{ categoryValue }
            </if>
        </trim>
    </select>

    <update id="updateMenu" parameterType="hashmap">
        UPDATE TBL_MENU
<!--        <set>-->
<!--            <if test="menuName != null and menuName != ''">-->
<!--                MENU_NAME = #{ menuName }-->
<!--            </if>-->
<!--            <if test="orederableStatus != null and orderableStatus != ''">-->
<!--              , ORDERABLE_STATUS = #{ orderableStatus }-->
<!--            </if>-->
<!--        </set>-->
        <trim prefix="SET" prefixOverrides=",">
            <if test="menuName != null and menuName != ''">
                MENU_NAME = #{ menuName }
            </if>
            <if test="orderableStatus != null and orderableStatus != ''">
                , ORDERABLE_STATUS = #{ orderableStatus }
            </if>
        </trim>
          WHERE MENU_CODE = #{ menuCode }
    </update>
</mapper>